{"version":3,"file":"storage.factory.js","sourceRoot":"","sources":["../../../../src/services/storage/storage.factory.ts"],"names":[],"mappings":"OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB;OAC3C,EAAE,YAAY,EAAE,MAAM,iBAAiB;OACvC,EAAE,sBAAsB,EAAE,MAAM,4BAA4B;OAC5D,EAAE,aAAa,EAAE,MAAM,kBAAkB;OAEzC,EAAE,WAAW,EAAE,MAAM,0CAA0C;AACtE;;;;;;;;GAQG;AACH;IAAA;QAUQ,cAAS,GAAe,EAAE,CAAC;IAuCnC,CAAC;IAhDD;;;;;OAKG;IACW,yBAAU,GAAxB;QACQ,MAAM,CAAC,IAAI,cAAc,EAAE,CAAC;IAChC,CAAC;IAEL;;;;;;OAMG;IACI,2BAAE,GAAT,UAAU,IAAiB;QACnB,IAAI,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEpD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACX,KAAK,WAAW,CAAC,MAAM;oBACnB,OAAO,GAAG,IAAI,aAAa,EAAE,CAAC;oBAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;oBAC/B,KAAK,CAAC;gBACV,KAAK,WAAW,CAAC,gBAAgB;oBAC7B,OAAO,GAAG,IAAI,sBAAsB,EAAE,CAAC;oBACvC,KAAK,CAAC;gBACV,KAAK,WAAW,CAAC,KAAK;oBAClB,OAAO,GAAG,IAAI,YAAY,EAAE,CAAC;oBAC7B,KAAK,CAAC;gBACV,KAAK,WAAW,CAAC,OAAO;oBACpB,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;oBAC/B,KAAK,CAAC;gBACV,QAAQ;YACZ,CAAC;YAED,EAAE,CAAC,CAAE,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBACpC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAClD,CAAC;YAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;QACnC,CAAC;QAED,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEL,qBAAC;AAAD,CAAC,AAjDD,IAiDC;AAED;IACA,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC;AACnC,CAAC","sourcesContent":["import { SessionStorage } from './storage.session';\nimport { LocalStorage } from './storage.local';\nimport { ImmutableMemoryStorage } from './storage.immutable_memory';\nimport { MemoryStorage } from './storage.memory';\nimport { IStorage } from './storage.interface';\nimport { StorageType } from '../../constants/persistence.storage_type';\n/**\n * A factory used to retrieve Storage objects\n * \n * @export\n * \\@class StorageFactory\n * \n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport class StorageFactory {\n/**\n * Returns a new instance of the storage factory.\n * \n * \\@static\n * @return {?}\n */\npublic static getStorage(): StorageFactory {\n        return new StorageFactory();\n    }\nprivate _storages: IStorage[] = [];\n/**\n * Returns a singleton object of a specified type.  Storage\n * types are initialized lazily.\n * \n * @param {?} type\n * @return {?}\n */\npublic of(type: StorageType): IStorage {\n        let /** @type {?} */ storage = this._storages[type];\n\n        if (!storage) {\n            switch (type) {\n                case StorageType.MEMORY:\n                    storage = new MemoryStorage();\n                    this._storages[type] = storage;\n                    break;\n                case StorageType.IMMUTABLE_MEMORY:\n                    storage = new ImmutableMemoryStorage();\n                    break;\n                case StorageType.LOCAL:\n                    storage = new LocalStorage();\n                    break;\n                case StorageType.SESSION:\n                    storage = new SessionStorage();\n                    break;\n                default:\n            }\n\n            if ( !storage || !storage.available()) {\n                throw new Error('Storage type not available');\n            }\n\n            this._storages[type] = storage;\n        }\n\n        return storage;\n    }\n\n}\n\nfunction StorageFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nStorageFactory.prototype._storages;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}