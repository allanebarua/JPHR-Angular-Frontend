{"version":3,"file":"storage.interface.js","sourceRoot":"","sources":["../../../../src/services/storage/storage.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { IPersistenceContainer } from '../../abstracts/persistence.container';\n\n/**\n * An extension of the IPersistenceContainer that provides some extra functionality\n * that allows for more efficient management of keys and the ability to handle\n * null values in browser storage (ie, if the key exists, but null is returned, it's\n * null.  If the key does not exist, it's undefined.)\n * \n * @export\n * @interface IStorage\n * @extends {IPersistenceContainer}\n * \n * @author Scott O'Bryan\n * @since 1.0\n */\nexport interface IStorage extends IPersistenceContainer {\n    /**\n     * Returns <code>true</code> if the storage type is available\n     * \n     * @returns {boolean} \n     */\n    available(): boolean;\n\n    /**\n     * Returns <code>true</code> if an item exists with the specified key\n     * \n     * @param {string} key \n     * @returns {boolean} \n     */\n    exists(key: string): boolean;\n\n    /**\n     * Returns a list of keys that have been saved using this Container.\n     * \n     * @returns {string[]} \n     */\n    keys(): string[];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}