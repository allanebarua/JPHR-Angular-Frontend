{"version":3,"file":"persistence.cache-impl.js","sourceRoot":"","sources":["../../../src/services/persistence.cache-impl.ts"],"names":[],"mappings":"OAAO,EAAE,UAAU,EAAE,MAAM,MAAM;OAE1B,EAAE,WAAW,EAAE,MAAM,uCAAuC;AAGnE;;;;;;;;;;;GAWG;AACH;IAIA;;;;;;OAMG;IACH,mBACQ,GAAW,EACX,OAAgC,EAChC,OAA2B,EAC3B,MAAwB;QAfhC,iBAuFC;QAxEO,sBAAwB,GAAxB,WAAwB;QAFxB,YAAO,GAAP,OAAO,CAAyB;QAIhC,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,WAAW,CAAC,MAAM,CAAC;QAE7C,sEAAsE;QACtE,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;QAEpD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,EAAC,QAAG,EAAE,UAAI,EAAE,CAAC;aACxC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,MAAM,EAAX,CAAW,CAAC;aACzB,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC;aAC5B,QAAQ,EAAE,CAAC;IACpB,CAAC;IACL;;;;;;;;OAQG;IACI,uBAAG,GAAV;QAAA,iBAmCK;QAlCG,IAAI,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAE1C,EAAE,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;YACvB;;;eAGG;YACH,IAAI,gBAAgB,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC;YAEzD,EAAE,CAAC,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC3B,IAAI,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;gBAE7C,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,YAAY,UAAU,CAAC,CAAC,CAAC;oBACzC,IAAI,gBAAgB,CAAC,aAAa,GAAG,CAAkB,CAAE,MAAwB,CAAC,CAAC;yBAC9E,WAAW,EAAE;yBACb,QAAQ,EAAE;yBACV,EAAE,CAAC,UAAC,KAAK,IAAK,OAAA,KAAI,CAAC,MAAM,GAAG,KAAK,EAAnB,CAAmB,CAAC;yBAClC,EAAE,CAAC,UAAC,KAAK,IAAK,OAAA,KAAI,CAAC,iBAAiB,GAAG,SAAS,EAAlC,CAAkC,CAAC,CAAC;oBAEvD,yCAAyC;oBACzC,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC;oBACvC,MAAM,CAAC,aAAa,CAAC;gBACzB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,+CAA+C;oBAC/C,MAAM,GAAmB,CAAG,MAAY,CAAC,CAAC;oBAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACzB,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,UAAU,CAAC;YACtB,CAAC;QACL,CAAC;QAED,gFAAgF;QAChF,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IACL;;;;OAIG;IACI,2BAAO,GAAd;QACQ,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IACL;;;OAGG;IACI,yBAAK,GAAZ;QACQ,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;IAC5B,CAAC;IACL,gBAAC;AAAD,CAAC,AAvFD,IAuFC;AAED;IACA,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC;IAC3B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,iBAAiB,CAAC;IACtC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC7B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC;AAC5B,CAAC","sourcesContent":["import { Observable } from 'rxjs';\nimport { ICache } from '../abstracts/persistence.cache';\nimport { StorageType } from '../constants/persistence.storage_type';\nimport { PersistenceService } from '../services/persistence.service';\nimport { CacheConfig } from '../types/persistence.cache_config';\n/**\n * Internal class which is an implementation of the ICache interface. This is \n * intended to be a private class for framework use only and will not be \n * exported by the libraries modules.\n * \n * @export\n * \\@class CacheImpl\n * @template T the type of value being cached\n * \n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport class CacheImpl<T> implements ICache<T> {\nprivate _value: T | undefined;\nprivate _cachedObservable: Observable<T> | undefined;\nprivate _changes: Observable<T>;\n/**\n * Creates an instance of CacheImpl.\n * @param {?} key\n * @param {?} _loader\n * @param {?} service\n * @param {?=} config\n */\nconstructor (\n        key: string,\nprivate _loader: () => T | Observable<T>,\n        service: PersistenceService,\n        config: CacheConfig = {}\n    ) {\n        let type = config.type || StorageType.MEMORY;\n\n        // For safety sake, ensure that oneUse is not present in configuration\n        service.defineProperty(this, \"_value\", key, config);\n\n        this._changes = service.changes({key, type })\n            .map((def) => this._value)\n            .publishBehavior(this._value)\n            .refCount();\n    }\n/**\n * Returns an observable to a cached value if one is loaded or \n * to the value specified by the loader that was supplied when \n * this cache was created if it is not.\n * \n *         single value when it's available before marking the stream \n *         as complete.\n * @return {?}\n */\npublic get(): Observable<T> {\n        let /** @type {?} */ result = this._value;\n\n        if (result === undefined) {\n            /*\n             * smo - if we do not have a result, then we might still have an observable from\n             * a previous call loaded in memory cache.\n             */\n            let /** @type {?} */ observable = this._cachedObservable;\n\n            if (observable === undefined) {\n                let /** @type {?} */ loaded = this._loader();\n\n                if (loaded && loaded instanceof Observable) {\n                    let /** @type {?} */ newObservable = ( /** @type {?} */((loaded as Observable<T>)))\n                        .publishLast()\n                        .refCount()\n                        .do((value) => this._value = value)\n                        .do((value) => this._cachedObservable = undefined);\n                    \n                    // cache the observable before publishing\n                    this._cachedObservable = newObservable;\n                    return newObservable;\n                } else {\n                    // static values simply get assigned immedietly\n                    result = /** @type {?} */(( loaded as T));\n                    this._value = result;\n                }\n            } else {\n                return observable;\n            }\n        }\n\n        // We have a real value so we need to make an observable that returns said value\n        return Observable.of(result);\n    }\n/**\n * A hot observable returning changes over time.\n * \n * @return {?}\n */\npublic changes(): Observable<T> {\n        return this._changes;\n    }\n/**\n * Clears the cached value forcing a reload.\n * @return {?}\n */\npublic clear(): void {\n        this._value = undefined;\n    }\n}\n\nfunction CacheImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nCacheImpl.prototype._value;\n/** @type {?} */\nCacheImpl.prototype._cachedObservable;\n/** @type {?} */\nCacheImpl.prototype._changes;\n/** @type {?} */\nCacheImpl.prototype._loader;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}