{"version":3,"file":"storage.immutable_memory.js","sourceRoot":"","sources":["../../../../src/services/storage/storage.immutable_memory.ts"],"names":[],"mappings":";;;;;OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB;AAChD;;;;;;;;GAQG;AACH;IAA4C,0CAAa;IAAzD;QAA4C,8BAAa;IA+BzD,CAAC;IA9BD;;;;;;;OAOG;IACI,oCAAG,GAAV,UAAW,GAAW,EAAE,KAAU;QAC1B,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YACtB,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,gBAAK,CAAC,GAAG,YAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;IACL;;;;;OAKG;IACI,oCAAG,GAAV,UAAW,GAAW;QACd,IAAI,gBAAgB,CAAC,KAAK,GAAG,gBAAK,CAAC,GAAG,YAAC,GAAG,CAAC,CAAC;QAE5C,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IACL,6BAAC;AAAD,CAAC,AA/BD,CAA4C,aAAa,GA+BxD","sourcesContent":["import { MemoryStorage } from './storage.memory';\n/**\n * Storage type for immutable memory\n * \n * @export\n * \\@class ImmutableMemoryStorage\n * \n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport class ImmutableMemoryStorage extends MemoryStorage {\n/**\n * Sets a value in memory storage after stringifying the object.  This\n * add some overhead but ensures each copy of the object is immutable.\n * \n * @param {?} key\n * @param {?} value\n * @return {?}\n */\npublic set(key: string, value: any): boolean {\n        if (value !== undefined) {\n            value = JSON.stringify(value);\n        }\n\n        return super.set(key, value);\n    }\n/**\n * Returns an immutable value for the specified key.\n * \n * @param {?} key\n * @return {?}\n */\npublic get(key: string): any {\n        let /** @type {?} */ value = super.get(key);\n\n        if (value !== undefined) {\n            return JSON.parse(value);\n        }\n\n        return undefined;\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}