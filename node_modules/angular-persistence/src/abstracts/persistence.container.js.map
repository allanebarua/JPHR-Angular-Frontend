{"version":3,"file":"persistence.container.js","sourceRoot":"","sources":["../../../src/abstracts/persistence.container.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * A container that uses the Angular Persistence Framework for storage.\n * A container is a name-spaced storage facility of like objects that\n * share the same persistence config.  The namespace used to construct\n * this Container should be unique and should not match any other attributes\n * stored by the system.\n * \n * The PersistenceContainer can be created using the <code>\n * PersistenceService.createContainer</code>.\n * \n * @export\n * @interface IPersistenceContainer\n * \n * @author Scott O'Bryan\n * @since 1.0\n */\nexport interface IPersistenceContainer {\n    \n    /**\n     * Sets a value for a specified key inside of the current container.\n     * \n     * @param {string} key the key representing the value\n     * @param {any} value the value to store\n     * \n     * @returns {boolean} true if the value was successfully stored\n     */\n    set (key: string, value: any): boolean;\n\n    /**\n     * Returns a value for the specified key inside of the keystore.\n     * \n     * @param {string} key a key representing the value to return\n     * @returns {any} the value for the specified key\n     */\n    get (key: string): any;\n    \n    /**\n     * Clears the value assigned to the specified key within the\n     * current containers namespace.\n     * \n     * @param {string} key a key representing the value to remove\n     * @returns {any} the value that has been removed from the cache\n     */\n    remove (key: string): any;\n\n    /**\n     * Clears the entire container of all its values.\n     */\n    removeAll (): void;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}