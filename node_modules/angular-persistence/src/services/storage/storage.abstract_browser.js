var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { BrowserContainer } from './storage.browser_container';
import { SubStorage } from './storage.sub_storage';
var /** @type {?} */ PREFIX = 'ANGULAR_PERSISTENCE_STORAGE';
/**
 * An insternal class which implements the IStorage interface using the SubStorage implementation
 * object and it's implementation of the info object.
 *
 * @export
 * @abstract
 * \@class AbstractBrowserStorage
 *
 * @author Scott O'Bryan
 * \@since 1.0
 * @abstract
 */
export var AbstractBrowserStorage = (function (_super) {
    __extends(AbstractBrowserStorage, _super);
    /**
     * @param {?} storage
     */
    function AbstractBrowserStorage(storage) {
        _super.call(this, PREFIX, new BrowserContainer(storage), (storage) ? true : false);
    }
    return AbstractBrowserStorage;
}(SubStorage));
//# sourceMappingURL=storage.abstract_browser.js.map