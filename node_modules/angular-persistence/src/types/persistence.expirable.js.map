{"version":3,"file":"persistence.expirable.js","sourceRoot":"","sources":["../../../src/types/persistence.expirable.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * An interface which specified supported terms of persistence expiration\n * throughout the framework.\n * \n * @author Scott O'Bryan\n * @since 1.0\n */\nexport type Expirable = {\n    /**\n     * Specified a value (in ms) for when the value in the cache\n     * becomes 'stale'.  Every time the value is accessed via the\n     * 'getter', the timeout counter is restarted.\n     * \n     * @type {number}\n     */\n    timeout?: number;\n\n    /**\n     * Specifies after how much time (in ms) the stored value will be \n     * valid for.  Unlike the timeout, this value will not reset when \n     * the value is read.\n     * \n     * @type {number}\n     */\n    expireAfter?: number;\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}